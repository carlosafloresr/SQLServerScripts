/*
Comments: This stORed procedure will copy/update a Business Alert header AND all settings FROM one company into another, OR within a company
Run fORmat: EXECUTE USP_Copy_BusinessAlert 'AIS', 'DNJ', 'NEW GL ACCOUNT', 'NEW GL ACCOUNT'
AuthOR: Fabien Peyaud
Created on: 04/11/2010
Updated by: Fabien Peyaud
Updated on: 05/11/2010
*/

ALTER PROCEDURE USP_Copy_BusinessAlert
	@DBFROM			Varchar(10),
	@DBTO			Varchar(10),
	@BUSALRTIDFROM	Varchar(15),
	@BUSALRTIDTO	Varchar(15)
AS
If @DBFROM = '' OR @DBTO = '' OR @BUSALRTIDFROM = '' OR @BUSALRTIDTO = ''
	PRINT 'One or more argument(s) missing'
ELSE
BEGIN
	DECLARE @BARULEIDFROM	Int,
			@BARULEIDTO		Int

	SET @BARULEIDFROM	= (SELECT BARULEID FROM SY40500 WHERE BUSALRTID = @BUSALRTIDFROM AND DBNAME = @DBFROM)
	SET @BARULEIDTO		= (SELECT BARULEID FROM SY40500 WHERE BUSALRTID = @BUSALRTIDTO AND DBNAME = @DBTO)

	IF (@DBFROM = @DBTO AND @BUSALRTIDTO = @BUSALRTIDFROM) OR (@BARULEIDFROM = @BARULEIDTO)
		PRINT 'Cannot copy to same Alert ID in same company – Change Destination alert ID OR one of the companies'
	ELSE
		BEGIN
			IF @BARULEIDTO IS NULL OR @DBFROM = @DBTO
			BEGIN
				SET @BARULEIDTO = (SELECT MAX(BARULEID) FROM SY40500) + 1

				PRINT 'Creating new Rule ID ' + CONVERT(varchar(4), @BARULEIDTO) + ' in ' + RTRIM(@DBTO) + ': ' + @BUSALRTIDTO
				PRINT 'Rule will not work until enabled in Dynamics'

				INSERT INTO SY40500
				(BARULEID, DSCRIPTN, BUSALRTID, EMAILMSG, LSTRWCHKD, INCLDRSLTS, DBNAME, CMPANYID, FREQTYPE, FREQINT, FRQSUBTYP, FRQSUBINT, FRQRELINT, FRQRCINT, STRTTIME, ENDTIME,
				STRTDATE, ENDDATE, CREATDDT, CRUSRID, MODIFDT, MDFUSRID, ENABLED, KEEPHIST, NMBRTIME, NOTEINDX, SCHEDTXT)
				SELECT	@BARULEIDTO, DSCRIPTN, @BUSALRTIDTO, EMAILMSG, LSTRWCHKD, INCLDRSLTS, @DBTO, (SELECT CMPANYID FROM SY01500 WHERE INTERID = @DBTO),
						FREQTYPE, FREQINT, FRQSUBTYP, FRQSUBINT, FRQRELINT, FRQRCINT, STRTTIME, ENDTIME,
						STRTDATE, ENDDATE, CREATDDT, CRUSRID, MODIFDT, MDFUSRID, 0, KEEPHIST, NMBRTIME, NOTEINDX, SCHEDTXT
				FROM	SY40500 
				WHERE	BARULEID = @BARULEIDFROM
			END
			ELSE
			BEGIN
				PRINT 'Updating existing Rule ID ' + CONVERT(varchar(4), @BARULEIDTO) + ' in ' + RTRIM(@DBTO) + ': ' + @BUSALRTIDTO
				
				UPDATE	SY40500
				SET		DSCRIPTN = (SELECT DSCRIPTN FROM SY40500 WHERE BARULEID = @BARULEIDFROM), 
						EMAILMSG = (SELECT EMAILMSG FROM SY40500 WHERE BARULEID = @BARULEIDFROM)
				WHERE	BARULEID = @BARULEIDTO

				--DELETE ALL settings of existing destination rule (except rule header located in SY40500)

				DELETE SY40502 WHERE BARULEID = @BARULEIDTO
				DELETE SY40503 WHERE BARULEID = @BARULEIDTO
				DELETE SY40504 WHERE BARULEID = @BARULEIDTO
				DELETE SY40505 WHERE BARULEID = @BARULEIDTO
				DELETE SY40506 WHERE BARULEID = @BARULEIDTO
			END

			INSERT INTO SY40502 (BARULEID, TBLPHYSNM, ALIASNAME)
			SELECT @BARULEIDTO, TBLPHYSNM, ALIASNAME FROM SY40502 WHERE BARULEID=@BARULEIDFROM

			INSERT INTO SY40503 (BARULEID, DISPSEQ, COLUMNAM, COLHEADR)
			SELECT @BARULEIDTO, DISPSEQ, COLUMNAM, COLHEADR FROM SY40503 WHERE BARULEID=@BARULEIDFROM

			INSERT INTO SY40504 (BARULEID, SQLCRTYP, SEQNUMBR, SQLCRTRIA)
			SELECT @BARULEIDTO, SQLCRTYP, SEQNUMBR, SQLCRTRIA FROM SY40504 WHERE BARULEID=@BARULEIDFROM

			INSERT INTO SY40505 (BARULEID, NOTIFTYPE, NOTFCTNID)
			SELECT @BARULEIDTO, NOTIFTYPE, NOTFCTNID FROM SY40505 WHERE BARULEID=@BARULEIDFROM
		END
END


/*
INSERT INTO SY40505 (BARULEID, NOTIFTYPE, NOTFCTNID)
SELECT	BARULEID,
		'Email',
		'kbutler@iils.com'
FROM	SY40500
WHERE	BUSALRTID = 'NEW GL ACCOUNT'

SELECT	BARULEID, NOTIFTYPE, NOTFCTNID
FROM	SY40505
WHERE	BARULEID IN (SELECT	BARULEID
FROM	SY40500
WHERE	BUSALRTID = 'NEW GL ACCOUNT')
*/